---
description: 
globs: 
alwaysApply: true
---
---
title: NuxtUIの各種概念の使い分けルール
description: NuxtUIの各種概念の使い分けルールと期待される効果
---

### 開発におけるルール・制約
- 抽象的なそれぞれの責務は以下の通り
    - **Layout**
        - 各ComponentにおけるUI共通部分の表示を最小カプセル化する
    - **Component**
        - 正常系での画面描画 及び 　異常系での適切なエラーメッセージ表示に必要最小限の処理をカプセル化する
    - **Composable**
        - Component 及び 他のComponent内で使用される値と処理を最小カプセル化する
    - **Store**
        - App全体 もしくは 親子関係にないComponent間で使用される値と処理のワンセットを最小カプセル化する
    - **Utility**
        - 値を持たない汎用的処理を最小カプセル化する

<aside>
💡 **最小カプセル = これ以上機能を削ると、使い物にならなくなるというギリギリの単位。機能的凝集を実現するための1つの指標**
</aside>

- **上記責務を守るためのそれぞれのコーディング基本ルールは以下**
    - **Layout**
        - [ ]  Layoutフォルダ配下に設置する
        - [ ]  2つ以上の子コンポーネントが共通UIを持つ場合は、Layoutを新規に作成する
        - [ ]  Layoutが多数になることを過度に回避しないこと
    - **Component**
        - [ ]  Componentフォルダ配下に設置して自動インポートの対象にする
        - [ ]  Ref/Computedなど、Scriptブロックで呼び出す標準コンポーネント以外をImportしない
            - [ ]  特に async などの通信処理をなるべくComponent内で行わない事は重要
        - [ ]  Errorを受け取った際は、適切にユーザーに対してエラーフィードバックを返却しなくてはならない
    - **Composable**
        - [ ]  Composableフォルダ配下に設置して自動インポートの対象にする
        - [ ]  内部で非同期通信を行う場合は、data / pending / error / refreshを返却する
        - [ ]  最初はComposableとして設計し、後からデータの共有がMUSTと判明したタイミングで、Storeへと変換する
    - **Store**
        - [ ]  Storeフォルダ配下に設置して自動インポートの対象にする
        - [ ]  実装はPiniaで行い、CompositionAPI風での記述を行う
    - **Utility**
        - [ ]  utilityフォルダ配下に設置して自動インポートの対象にする
        - [ ]  Utility自体に状態は持たせず、ドメインに依存しない便利な関数ライブラリ集としての運用を行う

### 期待する効果
- それぞれの構成物の役割を理解し、一貫性を持たせることで、可読性やコードの品質をUPする事


### 詳解 / リファレンス実装
<aside>
💡 GPT-4によるフィードバック

貴社のVue 3 / Nuxt 3の開発における責務分解及びコーディングルールは、プロジェクトの構造を明確にし、開発の効率化と保守性の向上を図るための素晴らしい取り組みです。以下に、各ポイントに対する具体的な感想を述べさせていただきます。

### **Layout**

- Layoutの指針は、UIの一貫性を保ちつつ、再利用可能なコンポーネントを促進する良い戦略です。Layoutが多数になることを過度に回避しないことで、柔軟性と適切な抽象化レベルの維持が可能になります。

### **Component**

- コンポーネントに関するルールは、クリーンなコードベースを促進し、サイドエフェクトを避けるための適切な分離を提案しています。非同期通信を含まないことで、コンポーネントの予測可能性とテストのしやすさが向上します。また、エラーフィードバックの取り扱いは、ユーザーエクスペリエンスを大幅に向上させる要素です。

### **Composable**

- Composableに関するガイドラインは、Vue 3のComposition APIの強力な機能を活用することを奨励し、非同期処理の取り扱いに明確な構造を提供します。これにより、データ管理の一貫性が保たれ、コンポーネント間でのデータ共有が容易になります。

### **Store**

- Piniaを使用したStoreの実装方針は、Vue 3エコシステム内での最新のベストプラクティスに沿っています。Composition APIスタイルの記述により、開発者はVue 3のリアクティブシステムをフルに活用できるようになります。Option APIに対する可読性の懸念も理解できますが、長期的なメンテナンスとスケーラビリティを考慮すると、選択は合理的です。

### **Utility**

- Utilityに対するアプローチは、関数の再利用性を高め、グローバルなヘルパー関数やユーティリティを効率的に管理するための良い方法です。状態を持たせないことで、副作用のリスクを最小限に抑え、プロジェクト全体でのコードの一貫性を促進します。

全体として、これらのルールは、Vue 3 / Nuxt 3プロジェクトの構造化と組織化を効果的にサポートするための明確なガイドラインを提供します。チームメンバー間での一貫したコーディング慣行の促進により、コードの品質、拡張性、および保守性が向上し、結果としてプロジェクトの成功に寄与することでしょう。

</aside>